package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"
	"sync"

	"github.com/bwmarrin/discordgo"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

const (
	configPath = "config.json"
	devCode    = "SECRET123" // –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
)

type Config struct {
	DiscordChannelID string `json:"discord_channel_id"`
	TelegramChatID   int64  `json:"telegram_chat_id"`
}

var (
	config   Config
	configMu sync.Mutex
)

func loadConfig() error {
	data, err := ioutil.ReadFile(configPath)
	if err != nil {
		return err
	}
	configMu.Lock()
	defer configMu.Unlock()
	return json.Unmarshal(data, &config)
}

func saveConfig() error {
	configMu.Lock()
	defer configMu.Unlock()
	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return err
	}
	return ioutil.WriteFile(configPath, data, 0644)
}

func main() {
	// 1) –ó–∞–≥—Ä—É–∑–∫–∞ .env
	_ = godotenv.Load()

	discordToken := os.Getenv("DISCORD_TOKEN")
	telegramToken := os.Getenv("TELEGRAM_TOKEN")
	if discordToken == "" || telegramToken == "" {
		log.Fatal("DISCORD_TOKEN –∏–ª–∏ TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
	}

	// 2) –ó–∞–≥—Ä—É–∑–∫–∞ (–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è) config.json
	if err := loadConfig(); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å %s: %v. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.", configPath, err)
		if err := saveConfig(); err != nil {
			log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å %s: %v", configPath, err)
		}
	}

	// 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
	tgBot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: %v", err)
	}
	log.Printf("Telegram –±–æ—Ç: %s", tgBot.Self.UserName)

	// 4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord
	dg, err := discordgo.New("Bot " + discordToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Discord-—Å–µ—Å—Å–∏–∏: %v", err)
	}
	dg.Identify.Intents = discordgo.IntentsGuildMessages |
		discordgo.IntentsMessageContent

	// 5) Discord-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	dg.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		if m.Author.Bot {
			return
		}
		content := strings.TrimSpace(m.Content)

		// 5.1) –ö–æ–º–∞–Ω–¥–∞ /syn ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Discord-–∫–∞–Ω–∞–ª
		if strings.HasPrefix(strings.ToLower(content), "/syn") {
			configMu.Lock()
			config.DiscordChannelID = m.ChannelID
			configMu.Unlock()
			if err := saveConfig(); err != nil {
				s.ChannelMessageSend(m.ChannelID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
				return
			}
			s.ChannelMessageSend(m.ChannelID, "‚úÖ Discord‚Äë–∫–∞–Ω–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: "+m.ChannelID)
			return
		}

		// 5.2) –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–æ–∏—Ö ID –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ Telegram
		configMu.Lock()
		dCh := config.DiscordChannelID
		tCh := config.TelegramChatID
		configMu.Unlock()

		if dCh != "" && tCh != 0 && m.ChannelID == dCh {
			text := "**" + m.Author.Username + "**: " + m.Content
			msg := tgbotapi.NewMessage(tCh, text)
			//msg.ParseMode = "Markdown"
			if _, err := tgBot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %v", err)
			}
		}
	})

	// 6) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Discord
	if err := dg.Open(); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Discord: %v", err)
	}
	defer dg.Close()
	log.Println("Discord –ø–æ–¥–∫–ª—é—á–µ–Ω‚Ä¶")

	// 7) –û–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, _ := tgBot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		text := strings.TrimSpace(update.Message.Text)
		chatID := update.Message.Chat.ID

		// DEBUG: —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ ID —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è
		log.Printf("üì® TG update ‚Äî incoming chatID=%d, saved chatID=%d, text=%q",
			chatID, config.TelegramChatID, text)

		// 7.1) –ö–æ–º–∞–Ω–¥–∞ /ack ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Telegram‚Äë—á–∞—Ç
		if strings.HasPrefix(strings.ToLower(text), "/ack") {
			configMu.Lock()
			config.TelegramChatID = chatID
			configMu.Unlock()
			if err := saveConfig(); err != nil {
				tgBot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."))
				continue
			}
			tgBot.Send(tgbotapi.NewMessage(chatID, "‚úÖ Telegram‚Äë—á–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: "+strconv.FormatInt(chatID, 10)))
			continue
		}

		// 7.2) –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–æ–∏—Ö ID –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ Discord
		configMu.Lock()
		dCh := config.DiscordChannelID
		tCh := config.TelegramChatID
		configMu.Unlock()

		if dCh != "" && tCh != 0 && chatID == tCh {
			discordText := update.Message.From.UserName + ": " + text
			if _, err := dg.ChannelMessageSend(dCh, discordText); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord: %v", err)
			}
		}
	}
}
